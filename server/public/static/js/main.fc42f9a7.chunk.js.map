{"version":3,"sources":["components/loading/default.js","components/hoc/loadable.js","App.js","serviceWorker.js","index.js"],"names":["DefaultLoading","Component","loader","loading","Loadable","Home","Detail","Edit","routes","path","name","exact","hidden","App","Container","className","Navbar","bg","Nav","filter","route","indexOf","map","Link","key","as","NavLink","to","activeClassName","match","CSSTransition","in","timeout","classNames","unmountOnExit","Boolean","window","location","hostname","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUAEqBA,E,iLAEjB,OAAO,4C,GAFiCC,aCC7B,WAACC,GAAsC,IAA9BC,EAA6B,uDAAnBH,EAChC,OAAOI,IAAS,CACdF,SACAC,aCIEE,EAAOD,GAAS,kBAAM,sDACtBE,EAASF,GAAS,kBAAM,uDACxBG,EAAOH,GAAS,kBAAM,sDAGtBI,EAAS,CACb,CAAEC,KAAM,IAAKC,KAAM,OAAQC,OAAO,EAAMV,UAAWI,GACnD,CAAEI,KAAM,cAAeC,KAAM,SAAUT,UAAWK,GAClD,CAAEG,KAAM,QAASC,KAAM,SAAUC,OAAO,EAAMC,QAAQ,EAAMX,UAAWM,GACvE,CAAEE,KAAM,YAAaC,KAAM,OAAQT,UAAWM,GAC9C,CAAEE,KAAM,SAAUC,KAAM,QAAST,UAPrBG,GAAS,kBAAM,kCAgDdS,E,iLApCX,OACE,kBAAC,IAAD,KACE,oCACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,aACnB,kBAACC,EAAA,EAAD,CAAQC,GAAG,SACT,kBAACC,EAAA,EAAD,CAAKH,UAAU,WACZP,EACEW,QAAO,SAAAC,GAAK,OAAiC,IAA7BA,EAAMX,KAAKY,QAAQ,OAAgBD,EAAMR,UACzDU,KAAI,SAAAF,GAAK,OACR,kBAACF,EAAA,EAAIK,KAAL,CAAUC,IAAKJ,EAAMX,KAAMgB,GAAIC,IAASC,GAAIP,EAAMX,KAAMmB,gBAAgB,SAASjB,OAAK,GACnFS,EAAMV,WAMhBF,EAAOc,KAAI,gBAAGb,EAAH,EAAGA,KAAMR,EAAT,EAASA,UAAT,OACV,kBAAC,IAAD,CAAOuB,IAAKf,EAAME,OAAK,EAACF,KAAMA,IAC3B,YAAgB,IAAboB,EAAY,EAAZA,MACF,OACE,kBAACC,EAAA,EAAD,CAAeC,GAAa,MAATF,EAAeG,QAAS,IAAKC,WAAW,OAAOC,eAAa,GAC7E,yBAAKnB,UAAU,QACb,kBAACd,EAAD,qB,GAxBNA,aCXEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCTN,IAAMU,EAAS,IAAIC,IAAa,CAC9BC,IAAK,kCAGPC,IAASC,OACP,kBAAC,IAAD,CAAgBJ,OAAQA,GACtB,kBAAC,EAAD,OAEFK,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fc42f9a7.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\n\r\nexport default class DefaultLoading extends Component {\r\n  render() {\r\n    return <div>loading</div>\r\n  }\r\n}\r\n","import Loadable from \"react-loadable\"\r\nimport DefaultLoading from \"../loading/default\"\r\n\r\nexport default (loader, loading = DefaultLoading) => {\r\n  return Loadable({\r\n    loader,\r\n    loading\r\n  })\r\n}\r\n","import React, { Component } from \"react\"\nimport { Navbar, Nav, Container } from \"react-bootstrap\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"./App.css\"\n\nimport { BrowserRouter as Router, NavLink, Route } from \"react-router-dom\"\nimport { CSSTransition } from \"react-transition-group\"\n\nimport Loadable from \"@/components/hoc/loadable\"\n\nconst Home = Loadable(() => import(\"@/views/home/index\"))\nconst Detail = Loadable(() => import(\"@/views/detail/index\"))\nconst Edit = Loadable(() => import(\"@/views/edit/index\"))\nconst About = Loadable(() => import(\"@/views/about/index\"))\n\nconst routes = [\n  { path: \"/\", name: \"Home\", exact: true, Component: Home },\n  { path: \"/detail/:id\", name: \"Detail\", Component: Detail },\n  { path: \"/edit\", name: \"Create\", exact: true, hidden: true, Component: Edit },\n  { path: \"/edit/:id\", name: \"Edit\", Component: Edit },\n  { path: \"/about\", name: \"About\", Component: About }\n]\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <>\n          <Container className=\"container\">\n            <Navbar bg=\"light\">\n              <Nav className=\"mx-auto\">\n                {routes\n                  .filter(route => route.path.indexOf(\":\") === -1 && !route.hidden)\n                  .map(route => (\n                    <Nav.Link key={route.path} as={NavLink} to={route.path} activeClassName=\"active\" exact>\n                      {route.name}\n                    </Nav.Link>\n                  ))}\n              </Nav>\n            </Navbar>\n\n            {routes.map(({ path, Component }) => (\n              <Route key={path} exact path={path}>\n                {({ match }) => {\n                  return (\n                    <CSSTransition in={match != null} timeout={300} classNames=\"page\" unmountOnExit>\n                      <div className=\"page\">\n                        <Component />\n                      </div>\n                    </CSSTransition>\n                  )\n                }}\n              </Route>\n            ))}\n          </Container>\n        </>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ApolloClient from \"apollo-boost\"\nimport { ApolloProvider } from \"react-apollo\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:3001/graphql\"\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}